{"version":3,"sources":["reducers/reducer.js","context/PomodoroContext.js","components/task-components/TaskType.js","components/task-components/TaskDetails.js","utils/date.js","utils/useTimer.js","components/task-components/EndTime.js","components/task-components/TaskTimer.js","components/MainTask.js","components/SaveButton.js","components/cell-renderers/ActionCellRenderer.js","components/cell-renderers/ProgressCellRenderer.js","components/full-width-cell-renderers/AddTaskCellRenderer.js","components/PomodoroGrid.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","console","group","type","log","groupEnd","tasks","map","row","id","timerStarted","activeTaskId","timeLeft","task","taskNo","taskCount","completed","filter","PomodoroContext","createContext","initialState","init","initial","gridState","JSON","parse","localStorage","getItem","PomodoroProvider","children","useReducer","dispatch","Provider","value","TaskType","memo","props","pomodoroType","setPomodoroType","useState","showAlert","setShowAlert","style","paddingBottom","ToggleButtonGroup","sx","color","exclusive","onChange","event","newValue","setTimeout","ToggleButton","paddingTop","Alert","severity","TaskDetails","theme","isPomodoroTypeSelected","emoji","className","fontSize","paddingRight","background","fontWeight","serialiseDate","date","serialised","getHours","padStartWithZeros","getMinutes","join","totalStringSize","toString","padStart","formatSecondsIntoMinutesAndSeconds","seconds","Math","floor","useTimer","initialSeconds","taskCompletedCallback","setSeconds","useEffect","timer","setInterval","clearInterval","EndTime","buttonColor","setTimerStarted","useContext","endTime","Date","endTimeDelta","setMinutes","round","endTimeString","display","paddingLeft","Button","disableElevation","backgroundColor","onClick","startIcon","variant","marginLeft","TaskTimer","stateTimerStarted","setStateTimerStarted","callback","useCallback","timerString","padding","prev","ACTIVE_TASK_DEFAULT","MainTask","activeTask","setActiveTask","themes","undefined","SaveButton","gridRef","justifyContent","alignItems","size","mt","length","current","api","showLoadingOverlay","hideOverlay","setItem","stringify","alert","ActionCellRenderer","rowData","node","data","isButtonDisabled","IconButton","disabled","ProgressCellRenderer","setData","timeString","ProgressComponent","CircularProgressWithLabel","Box","position","CircularProgress","top","left","bottom","right","Typography","component","minutes","AddTaskCellRenderer","pomodoroCount","setPomodoroCount","setTask","error","setError","height","width","mx","TextField","required","autoComplete","label","e","target","select","minWidth","MenuItem","i","generateId","PomodoroGrid","formatDateIntoMinutesAndSeconds","columnTypes","useMemo","cellStyle","columnDefs","field","maxWidth","cellRenderer","pinned","valueFormatter","headerName","valueGetter","sort","params","startTime","getValue","newDate","defaultColDef","flex","suppressMovable","pinnedBottomRowData","getRowStyle","isRowPinned","foreground","postSort","rowNodes","nextInsertPos","splice","isFullWidthCell","rowPinned","getRowId","getRowHeight","ref","fullWidthCellRenderer","animateRows","overlayNoRowsTemplate","overlayLoadingTemplate","App","useRef","pomodoro","short_break","long_break","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5878057a.chunk.js","sourcesContent":["const reducer = (state = {}, action) => {\n    console.group(action.type);\n    console.log('dispatching: ', action);\n    console.groupEnd(action.type);\n    switch (action.type) {\n        case 'started_timer':\n            return {\n                tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, timerStarted: true };\n                }),\n                activeTaskId: action.id,\n            };\n        case 'stopped_timer':\n            return {\n                ...state, tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, timerStarted: false, timeLeft: action.timeLeft }\n                })\n            }\n        case 'added_task':\n            return {\n                ...state,\n                tasks: [...state.tasks, {\n                    id: action.id,\n                    task: action.task,\n                    taskNo: action.taskNo,\n                    taskCount: action.taskCount,\n                    timerStarted: false,\n                    completed: false,\n                    timeLeft: 1500\n                }]\n            }\n        case 'deleted_task':\n            return { tasks: state.tasks.filter((row) => row.id !== action.id), activeTaskId: -1 };\n        case 'completed_task':\n            return {\n                ...state, tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, completed: true, timerStarted: false, timeLeft: 0 }\n                })\n            };\n        case 'resetted_active_task':\n            return { ...state, activeTaskId: -1 }\n        default:\n            return state;\n    }\n}\nexport default reducer;","import { useReducer, createContext } from 'react';\nimport reducer from \"../reducers/reducer\";\n\nexport const PomodoroContext = createContext();\n\nconst initialState = {\n    tasks: [],\n    activeTaskId: -1\n};\n\n/**\n * Before the Grid Component is rendered, check if there is any saved data in local storage and initialise\n * the state with it.\n * Alternatively, you can implement this logic inside the onGridReady event on the Grid Component\n */\nconst init = (initial) => {\n    const gridState = JSON.parse(localStorage.getItem('gridState'));\n    if (gridState) {\n        return gridState;\n    }\n    return initial;\n}\n\nexport const PomodoroProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState, init);\n    const { tasks, activeTaskId } = state;\n\n    return (<PomodoroContext.Provider value={{ tasks, dispatch, activeTaskId }}>\n        {children}\n    </PomodoroContext.Provider>\n    );\n}","import { Alert, ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { useState, memo } from 'react';\nconst TaskType = memo((props) => {\n\n  const { timerStarted, pomodoroType, setPomodoroType } = props;\n  const [showAlert, setShowAlert] = useState(false);\n\n  const onChange = (event, newValue) => {\n    if (!newValue) return;\n    if (timerStarted) {\n      setShowAlert(true);\n\n      setTimeout(() => {\n        setShowAlert(false)\n      }, 3000)\n      return;\n    }\n    setPomodoroType(newValue);\n  }\n\n  // https://mui.com/components/button-group/\n  return (\n    <div style={{ paddingBottom: 15 }}>\n      <ToggleButtonGroup\n        sx={{\n          '& .MuiToggleButton-root': { color: 'white !important' },\n        }}\n        value={pomodoroType}\n        exclusive={true}\n        onChange={onChange}\n      >\n        <ToggleButton value=\"pomodoro\">Pomodoro</ToggleButton>\n        <ToggleButton value=\"short_break\">Short Break</ToggleButton>\n        <ToggleButton value=\"long_break\">Long Break</ToggleButton>\n      </ToggleButtonGroup>\n      {showAlert && <div style={{ paddingTop: 15 }}><Alert severity=\"warning\">Please stop the timer before clicking an action.</Alert></div>}\n    </div>\n  )\n\n});\n\nexport default TaskType;","import { memo } from 'react';\n\nconst TaskDetails = memo((props) => {\n\n    const { pomodoroType, theme, task } = props;\n\n    const isPomodoroTypeSelected = pomodoroType === \"pomodoro\";\n\n    const emoji = isPomodoroTypeSelected ? '📌' : '🕺';\n\n    return (<div className='task-container' >\n        <span style={{\n            fontSize: 30,\n            paddingRight: '5px'\n        }}>\n            {emoji}\n        </span>\n        <span style={{ color: theme.background, fontWeight: 'bold', fontSize: 24 }}>\n            {isPomodoroTypeSelected ?\n                <>\n                    {task ? \"Working on\" : \"Time to focus!\"}\n                    {task && (<div style={{ fontWeight: 'normal', fontSize: 20 }}>{task}</div>)}\n                </>\n                :\n                \"Time for a break!\"\n            }\n        </span>\n    </div >)\n});\n\nexport default TaskDetails;","/**\n * Serialises a Date to a string of format `HH:mm am/pm`.\n * from https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format\n * @param date The date to serialise.\n */\nexport function serialiseDate(date) {\n    let serialised = [date.getHours(), padStartWithZeros(date.getMinutes(), 2)].join(':');\n    serialised += date.getHours() >= 12 ? 'pm' : 'am';\n\n    return serialised;\n}\n\nfunction padStartWithZeros(value, totalStringSize) {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function formatSecondsIntoMinutesAndSeconds(value) {\n    const seconds = padStartWithZeros(value % 60, 2);\n    const minutes = padStartWithZeros(Math.floor(value / 60), 2);\n    return [minutes, seconds].join(':');\n}","import { useEffect, useState } from \"react\";\n\nconst useTimer = (timerStarted, initialSeconds, taskCompletedCallback) => {\n\n    const [seconds, setSeconds] = useState(initialSeconds);\n\n    useEffect(() => {\n        let timer;\n\n        if (timerStarted) {\n            if (seconds === 0) {\n                taskCompletedCallback()\n            } else if (seconds > 0) {\n                timer = setInterval(() => {\n                    // could have used setSeconds(prev => prev - 1) and removed the seconds dependency\n                    // but this can lead to the timers being out of sync\n                    setSeconds(seconds - 1)\n                }, 1000);\n            }\n        }\n\n        return () => {\n            if (timer) { clearInterval(timer); };\n        }\n\n    }, [timerStarted, seconds, taskCompletedCallback]);\n\n    return [seconds, setSeconds];\n};\n\nexport default useTimer;","import { Button } from '@mui/material';\nimport { memo, useContext } from 'react';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport StopIcon from '@mui/icons-material/Stop';\nimport { serialiseDate } from '../../utils/date';\nimport { PomodoroContext } from '../../context/PomodoroContext';\n\nconst EndTime = memo((props) => {\n    const { pomodoroType, buttonColor, timerStarted, setTimerStarted, id, timeLeft, seconds } = props;\n    const { dispatch } = useContext(PomodoroContext);\n    const endTime = new Date();\n    const endTimeDelta = pomodoroType === \"pomodoro\" ? timeLeft ? timeLeft : 1500 : pomodoroType === \"short_break\" ? 300 : 900;\n    endTime.setMinutes(endTime.getMinutes() + Math.round(endTimeDelta / 60));\n    const endTimeString = serialiseDate(endTime);\n\n    return (<div style={{ display: 'flex', paddingLeft: '15px' }}>\n        <Button disableElevation\n            sx={{\n                backgroundColor: 'white',\n                color: buttonColor,\n                fontWeight: 'bold',\n                '&:hover': {\n                    backgroundColor: '#00000014',\n                    color: 'white'\n                },\n            }}\n            onClick={() => {\n                if (id !== -1) {\n                    timerStarted ? dispatch({ type: 'stopped_timer', id, timeLeft: seconds }) : dispatch({ type: 'started_timer', id })\n                }\n                setTimerStarted(!timerStarted);\n\n            }}\n            startIcon={timerStarted ? <StopIcon fontSize='medium' /> : <PlayArrowIcon fontSize='medium' />}\n            variant=\"contained\">{timerStarted ? \"STOP\" : \"START\"}</Button>\n        <div style={{ marginLeft: 'auto' }}>\n            <span style={{\n                color: 'white',\n\n                fontSize: 20\n            }}>\n                end time\n                <span style={{\n                    fontWeight: 'bold',\n                    fontSize: 30\n                }}>\n                    {\" \" + endTimeString}\n                </span>\n            </span>\n        </div></div>)\n});\n\nexport default EndTime;","import { useState, useEffect, useCallback, memo } from 'react';\nimport { formatSecondsIntoMinutesAndSeconds } from '../../utils/date';\nimport useTimer from '../../utils/useTimer';\nimport EndTime from './EndTime';\n\nconst TaskTimer = memo((props) => {\n  const { pomodoroType, theme, timeLeft, id, timerStarted } = props;\n  const [stateTimerStarted, setStateTimerStarted] = useState(timerStarted);\n\n  const callback = useCallback(() => {\n    setStateTimerStarted(false);\n  }, []);\n\n  const [seconds, setSeconds] = useTimer(stateTimerStarted, timeLeft, callback);\n\n  useEffect(() => {\n    setStateTimerStarted(timerStarted)\n  }, [timerStarted]);\n\n  useEffect(() => {\n    setSeconds(timeLeft);\n  }, [id, timeLeft, setSeconds])\n\n  const timerString = formatSecondsIntoMinutesAndSeconds(seconds);\n  return (\n    <div>\n      <div style={{ color: 'white', fontWeight: 'bold', fontSize: 90, padding: '30px 0px' }}>{timerString}</div>\n      <EndTime\n        buttonColor={theme.background}\n        timerStarted={stateTimerStarted}\n        setTimerStarted={(prev) => setStateTimerStarted(prev)}\n        id={id}\n        timeLeft={timeLeft}\n        seconds={seconds}\n        pomodoroType={pomodoroType} />\n    </div>\n  )\n});\n\nexport default TaskTimer;","import { useState, useEffect, useContext, memo } from 'react';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport TaskType from './task-components/TaskType';\nimport TaskDetails from './task-components/TaskDetails';\nimport TaskTimer from './task-components/TaskTimer';\n\nconst ACTIVE_TASK_DEFAULT = { id: -1, timeLeft: 1500, timerStarted: false }\n\nconst MainTask = memo((props) => {\n  const { activeTaskId, tasks, dispatch } = useContext(PomodoroContext);\n  const [activeTask, setActiveTask] = useState(ACTIVE_TASK_DEFAULT);\n  const [pomodoroType, setPomodoroType] = useState('pomodoro');\n  const { timeLeft, id, task, taskNo, taskCount, timerStarted, completed } = activeTask;\n  const { themes } = props;\n  // if there is an active task, i.e. the timer is running, then store the data inside the activeTask hook\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setActiveTask(tasks.filter(row => row.id === activeTaskId)[0])\n    } else {\n\n    }\n  }, [activeTaskId, tasks]);\n\n  // when task is completed i.e. timer has reached 0 seconds or via button, show the short break option\n  useEffect(() => {\n    if (completed) {\n      setPomodoroType('short_break')\n    }\n  }, [completed])\n\n  // if type is changed from pomodoro to short break or long break, reset the active task \n  useEffect(() => {\n    if ((id && id !== -1) && (pomodoroType === \"long_break\" || pomodoroType === \"short_break\")) {\n      dispatch({ type: 'resetted_active_task' })\n      setActiveTask(ACTIVE_TASK_DEFAULT)\n    }\n  }, [pomodoroType, id, dispatch])\n\n  useEffect(() => {\n    if (id === -1) {\n      if (pomodoroType === 'pomodoro') {\n        setActiveTask(task => ({ ...task, timeLeft: 1500 }));\n      } else if (pomodoroType === 'short_break') {\n        setActiveTask(task => ({ ...task, timeLeft: 300 }));\n      }\n      else if (pomodoroType === 'long_break') {\n        setActiveTask(task => ({ ...task, timeLeft: 900 }));\n      }\n    }\n  }, [pomodoroType, id]);\n\n  // whenever there is no active task, i.e. a task from the grid is not active, then default to pomodoro option\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setPomodoroType('pomodoro')\n    }\n  }, [activeTaskId])\n\n  return (<div className=\"main-task-background\" style={{ backgroundColor: themes[pomodoroType].background }} >\n    <div className=\"main-task-container\">\n      <TaskType timerStarted={timerStarted} pomodoroType={pomodoroType} setPomodoroType={(type) => setPomodoroType(type)} />\n      <TaskDetails pomodoroType={pomodoroType} id={id} theme={themes[pomodoroType]} task={task ? `${task} (${taskNo}/${taskCount})` : undefined} />\n      <TaskTimer timeLeft={timeLeft} id={id} timerStarted={timerStarted} pomodoroType={pomodoroType} theme={themes[pomodoroType]} />\n    </div>\n\n  </div>)\n})\nexport default MainTask;","import React, { useContext, memo } from 'react';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport { Button } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\n\nconst SaveButton = memo(props => {\n    const { tasks, activeTaskId } = useContext(PomodoroContext);\n\n    // grab reference to the grid so that the component can access the Grid API\n    const { gridRef } = props;\n\n    const saveHandler = () => {\n        if (activeTaskId) {\n            let activeTask = tasks.filter(row => row.id === activeTaskId);\n            if (activeTask.length > 0) {\n                if (activeTask[0].timerStarted) {\n                    gridRef.current.api.showLoadingOverlay();\n                    setTimeout(() => {\n                        gridRef.current.api.hideOverlay();\n                    }, 3000);\n                    return;\n                }\n            }\n        }\n        localStorage.setItem('gridState', JSON.stringify({ tasks, activeTaskId }));\n        alert('Saved Grid State to Local Storage!')\n    }\n\n    return (<div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', paddingBottom:'20px' }}>\n            <Button\n                variant=\"contained\"\n                size='large'\n                color=\"primary\"\n                sx={{ mt: 3 }}\n                startIcon={<SaveIcon />}\n                onClick={saveHandler}\n            >\n                Save to Local Storage\n            </Button>\n        </div>\n    )\n})\n\nexport default SaveButton;","import { memo, useContext } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport { IconButton } from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport StopIcon from '@mui/icons-material/Stop';\n\nconst ActionCellRenderer = memo((props) => {\n    const { dispatch, rowData } = useContext(PomodoroContext);\n    const { timerStarted, id, timeLeft, completed, } = props.node.data;\n    // start and stop the timer for the active task\n    const toggleTimer = () => {\n        if (timerStarted) {\n            dispatch({ type: 'stopped_timer', id, timeLeft });\n        }\n        else { dispatch({ type: 'started_timer', id }); }\n    }\n\n    // dispatch an action to mark the active task as complete\n    // if the timer is active, then display loading overlay\n    const completeTask = () => {\n        if (timerStarted) {\n            props.api.showLoadingOverlay();\n            setTimeout(() => {\n                props.api.hideOverlay();\n            }, 3000)\n            return;\n        }\n        dispatch({ type: 'completed_task', id });\n    }\n\n    // dispatch an action to delete active task\n    // if the timer is active, then display loading overlay\n    const deleteTask = () => {\n        if (timerStarted) {\n            props.api.showLoadingOverlay();\n\n            setTimeout(() => {\n                props.api.hideOverlay();\n            }, 3000)\n            return;\n        };\n        dispatch({ type: 'deleted_task', id });\n    }\n\n    // button is disabled if there exists a timer running for a task\n    const isButtonDisabled = () => {\n        if (rowData) {\n            const activeTimers = rowData.filter((row) => (row.timerStarted && row.id !== id));\n            const isTimerActive = activeTimers.length > 0;\n            if (isTimerActive) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    return (<>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            size=\"small\"\n            onClick={toggleTimer}\n            disabled={completed ? true : isButtonDisabled()}\n        >\n            {timerStarted ? <StopIcon fontSize=\"large\" /> : <PlayArrowIcon fontSize=\"large\" />}\n        </IconButton>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            disabled={completed ? true : isButtonDisabled()}\n            onClick={completeTask}\n            size=\"small\">\n            <CheckCircleIcon fontSize=\"large\" />\n        </IconButton>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            disabled={isButtonDisabled()}\n            size=\"small\"\n            onClick={deleteTask}\n        >\n            <DeleteIcon fontSize=\"large\" />\n        </IconButton>\n    </>)\n});\n\nexport default ActionCellRenderer;","import { Box, CircularProgress, Typography } from '@mui/material';\nimport { useEffect, memo, useContext, useCallback } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport { formatSecondsIntoMinutesAndSeconds } from '../../utils/date';\nimport useTimer from '../../utils/useTimer';\n\nconst ProgressCellRenderer = memo(props => {\n  const { dispatch } = useContext(PomodoroContext);\n  const { id, timerStarted, timeLeft } = props.node.data;\n\n  const taskCompletedCallback = useCallback(() => {\n    dispatch({ type: 'completed_task', id })\n  }, [id, dispatch]);\n\n  const [seconds] = useTimer(timerStarted, timeLeft, taskCompletedCallback);\n\n  useEffect(() => {\n    if (timerStarted) {\n      props.node.setData({ ...props.node.data, timeLeft: seconds })\n    }\n  }, [seconds, props.node, timerStarted])\n\n  let timeString = formatSecondsIntoMinutesAndSeconds(seconds);\n\n  return (<>\n    <div\n      style={{\n        fontSize: '25px',\n        fontWeight: 'bold'\n      }}>\n      {timeString}\n    </div>\n    <ProgressComponent timeLeft={seconds} />\n  </>)\n\n});\n\n\n// https://mui.com/components/progress/#circular-with-label\nfunction CircularProgressWithLabel(props) {\n  return (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      <CircularProgress variant='determinate' {...props} />\n      <Box\n        sx={{\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"white\">\n          {`${Math.round(props.value)}%`}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nconst ProgressComponent = memo(props => {\n  const { timeLeft } = props;\n  // represent timeLeft as a percentage of the total time\n  const minutes = Math.floor((((1500 - timeLeft) / 1500) * 100));\n\n  return (<CircularProgressWithLabel sx={{ color: 'white' }} value={minutes} />);\n});\n\n\nexport default ProgressCellRenderer;","import React, { useContext, memo, useState } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport AddTaskIcon from '@mui/icons-material/AddTask';\nimport { Box, MenuItem, Button, TextField } from '@mui/material';\nimport { v4 as generateId } from 'uuid';\n\nconst AddTaskCellRenderer = memo((props) => {\n    const { dispatch } = useContext(PomodoroContext);\n    const [pomodoroCount, setPomodoroCount] = useState(1);\n    const [task, setTask] = useState(\"\");\n    const [error, setError] = useState(false);\n\n    // dispatch an action to add a new tasks with the task and required pomodoro timers\n    const addTaskHandler = (e) => {\n        if (task.length < 1) {\n            setError(true)\n        } else {\n            for (let i = 0; i < pomodoroCount; i++) {\n                dispatch({ type: 'added_task', id: generateId(), task, taskNo: i + 1, taskCount: pomodoroCount });\n            };\n            setError(false)\n        }\n    }\n\n    return (<div\n        style={{\n            display: 'flex',\n            height: '100%',\n            justifyContent: 'center'\n        }}>\n        <div style={{ height: '100%', backgroundColor: '#ffffff1a', display: 'flex', alignItems: 'center' }}>\n            <Box\n                component=\"form\"\n                sx={{\n                    display: 'flex',\n                    alignItems: \"center\",\n                    justifyContent: 'center',\n                    width: '100%',\n                    '& .MuiTextField-root': { mx: 3 },\n                    '& .MuiButton-root': { mx: 3 },\n                }}\n            >\n                <TextField\n                    id=\"outlined-basic\"\n                    required\n                    autoComplete=\"off\"\n                    label=\"I'm working on...\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    value={task}\n                    error={error}\n                    onChange={(e) => setTask(e.target.value)}\n                />\n                <TextField\n                    select\n                    label=\"Est. Pomodoros\"\n                    type={'number'}\n                    sx={{ minWidth: 125 }}\n                    value={pomodoroCount}\n                    onChange={(e) => setPomodoroCount(e.target.value)}\n                    size=\"small\"\n                    variant=\"outlined\">\n                    <MenuItem value={1}>One</MenuItem>\n                    <MenuItem value={2}>Two</MenuItem>\n                    <MenuItem value={3}>Three</MenuItem>\n                    <MenuItem value={4}>Four</MenuItem>\n                </TextField>\n                <Button\n                    variant=\"contained\"\n                    size='large'\n                    color=\"primary\"\n                    startIcon={<AddTaskIcon />}\n                    onClick={addTaskHandler}\n                >\n                    Add Task\n                </Button>\n            </Box>\n        </div>\n    </div>)\n})\n\nexport default AddTaskCellRenderer;","import React, { useContext, useCallback, useMemo } from 'react';\nimport '../App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport ActionCellRenderer from './cell-renderers/ActionCellRenderer';\nimport ProgressCellRenderer from './cell-renderers/ProgressCellRenderer';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport AddTaskCellRenderer from './full-width-cell-renderers/AddTaskCellRenderer';\nimport { serialiseDate } from '../utils/date';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nconst PomodoroGrid = props => {\n    const { themes } = props;\n    const { tasks } = useContext(PomodoroContext);\n\n    const formatDateIntoMinutesAndSeconds = ({ value, data }) => (value && data.timeLeft) ? serialiseDate(value) : value;\n\n    const columnTypes = useMemo(() => ({\n        'timeColumn': {\n            cellStyle: {\n                justifyContent: 'center',\n            },\n        },\n        'grayColumn': {\n            cellStyle: {\n                backgroundColor: '#ffffff1a',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-around'\n            },\n        },\n        'textColumn': {\n            cellStyle: {\n                fontWeight: 'bold',\n                fontSize: '20px',\n                display: 'flex',\n                alignItems: 'center',\n            },\n        }\n    }), [])\n\n    const columnDefs = [\n        {\n            field: \"action\",\n            maxWidth: 200,\n            type: 'grayColumn',\n            cellRenderer: ActionCellRenderer,\n            pinned: 'left'\n        },\n        {\n            field: \"task\",\n            minWidth: 1000,\n            type: 'textColumn',\n            valueFormatter: ({ data, value }) => {\n                if (data.taskNo) {\n                    return `${value} (${data.taskNo}/${data.taskCount})`\n                }\n                return value;\n            },\n        },\n        {\n            headerName: 'Progress',\n            field: \"timer\",\n            type: 'grayColumn',\n            minWidth: 200,\n            valueGetter: ({ data }) => data.timeLeft,\n            sort: 'asc',\n            cellRenderer: ProgressCellRenderer,\n        },\n        {\n            headerName: \"Start Time\",\n            field: \"start_time\",\n            type: ['timeColumn', 'textColumn'],\n            valueGetter: params => {\n                if (params.data.timerStarted) {\n                    return new Date();\n                }\n            },\n            valueFormatter: formatDateIntoMinutesAndSeconds\n        },\n        {\n            headerName: 'End Time',\n            field: \"end_time\",\n            type: ['timeColumn', 'textColumn'],\n            valueGetter: params => {\n                const startTime = params.getValue('start_time');\n                if (startTime) {\n                    const date = startTime;\n                    const newDate = new Date(date);\n                    newDate.setMinutes(date.getMinutes() + Math.round(params.data.timeLeft / 60));\n                    return newDate\n                }\n            },\n            valueFormatter: formatDateIntoMinutesAndSeconds,\n\n        }\n    ];\n\n    const defaultColDef = useMemo(() => ({ flex: 1, suppressMovable: true, minWidth: 100 }), []);\n\n    const pinnedBottomRowData = useMemo(() => ([{}]), []);\n\n    const getRowStyle = useCallback(params => {\n        const { completed } = params.data;\n        if (!params.node.isRowPinned()) {\n            if (completed) {\n                const { background, foreground } = themes['completed'];\n                return { backgroundColor: background, color: foreground }\n            } else {\n                const { background, foreground } = themes['pomodoro'];\n                return { backgroundColor: background, color: foreground }\n            }\n        }\n    }, [themes])\n\n    const postSort = useCallback(rowNodes => {\n        // here we put completed rows on top while preserving the sort order\n        let nextInsertPos = 0;\n        for (let i = 0; i < rowNodes.length; i++) {\n            const completed = rowNodes[i].data.completed;\n            if (completed) {\n                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);\n                nextInsertPos++;\n            }\n        }\n    }, []);\n\n    const isFullWidthCell = useCallback((node) => node.rowPinned === 'bottom', [])\n\n    const getRowId = useCallback(({ data }) => data.id, []);\n\n    const getRowHeight = useCallback((params) => params.node.rowPinned === 'bottom' ? 82 : 60, []);\n\n    return (\n        <div style={{ height: '50%', width: '100%' }}>\n            <AgGridReact\n                className=\"ag-theme-alpine\"\n                style={{ height: '100%', width: '100%' }}\n                ref={props.gridRef}\n                columnDefs={columnDefs}\n                rowData={tasks.map(task => ({ ...task }))}\n                pinnedBottomRowData={pinnedBottomRowData}\n                columnTypes={columnTypes}\n                defaultColDef={defaultColDef}\n                getRowId={getRowId}\n                getRowHeight={getRowHeight}\n                getRowStyle={getRowStyle}\n                postSort={postSort}\n                isFullWidthCell={isFullWidthCell}\n                fullWidthCellRenderer={AddTaskCellRenderer}\n                animateRows={true}\n                overlayNoRowsTemplate={'<span class=\"ag-overlay-no-rows-center\">No Tasks To Show. Add Tasks using the Toolbar below.</span>'}\n                overlayLoadingTemplate={`<span class=\"ag-overlay-loading-center\">Please stop the timer before clicking an action.</span>`}\n                \n            >\n            </AgGridReact>\n        </div>\n    );\n}\n\n\n\nexport default PomodoroGrid;\n","import './App.css';\nimport MainTask from './components/MainTask';\nimport { useMemo, useRef } from 'react';\nimport { PomodoroProvider } from './context/PomodoroContext';\nimport SaveButton from './components/SaveButton';\nimport PomodoroGrid from './components/PomodoroGrid';\n\nconst App = () => {\n  const gridRef = useRef(null);\n\n  const themes = useMemo(() => ({\n    pomodoro: {\n      foreground: '#ffffff',\n      background: '#d95550',\n    },\n    short_break: {\n      foreground: '#ffffff',\n      background: '#1565c0',\n    },\n    long_break: {\n      foreground: '#ffffff',\n      background: '#ab47bc'\n\n    },\n    completed: {\n      foreground: '#ffffff',\n      background: '#4caf50'\n    }\n  }), []);\n\n  return (\n    <>\n      <PomodoroProvider>\n        <MainTask themes={themes} />\n        <PomodoroGrid gridRef={gridRef} themes={themes} />\n        <SaveButton gridRef={gridRef} />\n      </PomodoroProvider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}