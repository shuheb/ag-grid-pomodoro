{"version":3,"sources":["actions/ActionCreators.js","reducers/reducer.js","context/PomodoroContext.js","components/task-components/TaskTypeComponent.js","components/task-components/TaskDetailsComponent.js","utils/date.js","components/task-components/EndTimeComponent.js","components/task-components/TaskTimerComponent.js","components/MainTaskComponent.js","components/cell-renderers/ActionCellRenderer.js","components/cell-renderers/TimerCellRenderer.js","components/full-width-cell-renderers/AddTaskCellRenderer.js","components/Grid.js","components/SaveButton.js","App.js","reportWebVitals.js","index.js"],"names":["START_TIMER","STOP_TIMER","ADD_TASK","PERSIST_SECONDS","RESET_ACTIVE_TASK","MARK_AS_COMPLETE","DELETE_POMODORO","reducer","state","action","type","activeTaskId","payload","id","rowData","map","row","timerStarted","task","taskNo","taskCount","completed","timeLeft","filter","PomodoroContext","createContext","initialState","init","initial","gridState","JSON","parse","localStorage","getItem","PomodoroProvider","children","useReducer","dispatch","actions","startTimer","useCallback","stopTimer","addTask","generateId","persistSeconds","markAsComplete","deletePomodoro","resetActiveTask","Provider","value","TaskTypeComponent","memo","props","pomodoroType","setPomodoroType","useState","showAlert","setShowAlert","style","paddingBottom","ToggleButtonGroup","sx","color","exclusive","onChange","event","newValue","setTimeout","ToggleButton","paddingTop","Alert","severity","TaskDetailsComponent","theme","isPomodoroTypeSelected","emoji","className","fontSize","paddingRight","background","fontWeight","serialiseDate","date","serialised","getHours","padStartWithZeros","getMinutes","join","totalStringSize","toString","padStart","formatSecondsIntoMinutesAndSeconds","seconds","Math","floor","EndTimeComponent","buttonColor","setTimerStarted","endTime","Date","endTimeDelta","setMinutes","round","endTimeString","display","paddingLeft","Button","disableElevation","backgroundColor","onClick","startIcon","variant","marginLeft","TaskTimerComponent","setSeconds","stateTimerStarted","setStateTimerStarted","useEffect","undefined","prev","timer","setInterval","clearInterval","timerString","padding","MainTaskComponent","useContext","activeTask","setActiveTask","themes","ActionCellRenderer","node","data","isButtonDisabled","length","IconButton","size","disabled","api","showLoadingOverlay","hideOverlay","CircularProgressWithLabel","Box","position","CircularProgress","top","left","bottom","right","alignItems","justifyContent","Typography","component","ProgressComponent","minutes","TimerCellRenderer","timeString","AddTaskCellRenderer","pomodoroCount","setPomodoroCount","setTask","error","setError","height","width","mx","TextField","required","label","e","target","select","minWidth","MenuItem","i","Grid","formatDateIntoMinutesAndSeconds","columnTypes","useMemo","cellStyle","columnDefs","field","maxWidth","cellRendererSelector","pinned","valueFormatter","headerName","valueGetter","sort","params","startTime","getValue","newDate","defaultColDef","flex","suppressMovable","getRowStyle","isRowPinned","foreground","postSort","rowNodes","nextInsertPos","splice","ref","gridRef","immutableData","fullWidthCellRenderer","isFullWidthCell","rowPinned","animateRows","overlayLoadingTemplate","getRowNodeId","getRowHeight","pinnedBottomRowData","SaveLocalStorageButton","useRef","mt","current","setItem","stringify","App","pomodoro","short_break","long_break","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.897ffe53.chunk.js","sourcesContent":["export const START_TIMER = 'START_TIMER';\nexport const STOP_TIMER = 'STOP_TIMER';\nexport const ADD_TASK = 'ADD_TASK';\nexport const PERSIST_SECONDS = 'PERSIST_SECONDS'\nexport const RESET_ACTIVE_TASK ='RESET_ACTIVE_TASK'\nexport const MARK_AS_COMPLETE = 'MARK_AS_COMPLETE';\nexport const DELETE_POMODORO = 'DELETE_POMODORO';","import { START_TIMER, STOP_TIMER, ADD_TASK, PERSIST_SECONDS, RESET_ACTIVE_TASK, MARK_AS_COMPLETE, DELETE_POMODORO } from \"../actions/ActionCreators\";\nconst reducer = (state = {}, action) => {\n    // console.warn(`************* ${action.type} ${JSON.stringify(action.payload)} ***********`)\n    switch (action.type) {\n        case START_TIMER:\n            return {\n                ...state, activeTaskId: action.payload.id, rowData: state.rowData.map(row => {\n                    if (row.id !== action.payload.id) return row;\n                    return { ...row, timerStarted: true };\n                })\n            };\n        case STOP_TIMER:\n            return {\n                ...state, rowData: state.rowData.map(row => {\n                    if (row.id !== action.payload.id) return row;\n                    return { ...row, timerStarted: false }\n                })\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                rowData: [...state.rowData, {\n                    id: action.payload.id,\n                    task: action.payload.task,\n                    taskNo: action.payload.taskNo,\n                    taskCount: action.payload.taskCount,\n                    timerStarted: false,\n                    completed: false,\n                    timeLeft: 1500\n                }]\n            }\n        case DELETE_POMODORO:\n            return { ...state, activeTaskId: -1, rowData: state.rowData.filter((row) => row.id !== action.payload.id) };\n        case MARK_AS_COMPLETE:\n            return {\n                ...state, rowData: state.rowData.map(row => {\n                    if (row.id !== action.payload.id) return row;\n                    return { ...row, completed: true, timeLeft: 0 }\n                })\n            };\n        case PERSIST_SECONDS:\n            return {\n                ...state, rowData: state.rowData.map(row => {\n                    if (row.id !== action.payload.id) return row;\n                    return { ...row, timeLeft: action.payload.timeLeft }\n                })\n            }\n        case RESET_ACTIVE_TASK:\n            return { ...state, activeTaskId: -1 }\n        default:\n            return state;\n    }\n}\nexport default reducer;","import { useReducer, createContext, useCallback } from 'react';\nimport { START_TIMER, STOP_TIMER, ADD_TASK, PERSIST_SECONDS, RESET_ACTIVE_TASK, MARK_AS_COMPLETE, DELETE_POMODORO } from \"../actions/ActionCreators\";\nimport { v4 as generateId } from 'uuid';\nimport reducer from \"../reducers/reducer\";\n\nexport const PomodoroContext = createContext();\n\nconst initialState = {\n    rowData: [],\n    activeTaskId: -1\n};\n\n/**\n * Before the Grid Component is rendered, check if there is any saved data in local storage and initialise\n * the state with it.\n * Alternatively, you can implement this logic inside the onGridReady event on the Grid Component\n */\nconst init = (initial) => {\n    const gridState = JSON.parse(localStorage.getItem('gridState'));\n    if (gridState) {\n        return gridState;\n    }\n    return initial;\n}\n\nexport const PomodoroProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState, init);\n\n    const { rowData, activeTaskId } = state;\n    const startTimer = useCallback(({ id }) => {\n        dispatch({\n            type: START_TIMER,\n            payload: {\n                id\n            },\n        });\n    }, [dispatch]);\n\n    const stopTimer = useCallback(({ id }) => {\n        dispatch({\n            type: STOP_TIMER,\n            payload: {\n                id\n            },\n        });\n    }, [dispatch]);\n\n    const addTask = useCallback(({ task, taskNo, taskCount }) => {\n\n        dispatch({\n            type: ADD_TASK,\n            payload: {\n                id: generateId(),\n                task,\n                taskNo,\n                taskCount\n            },\n        });\n    }, [dispatch]);\n\n    const persistSeconds = useCallback(({ id, timeLeft }) => {\n\n        dispatch({\n            type: PERSIST_SECONDS,\n            payload: {\n                id,\n                timeLeft\n            },\n        });\n    }, [dispatch]);\n\n    const markAsComplete = useCallback(({ id }) => {\n        dispatch({\n            type: MARK_AS_COMPLETE,\n            payload: {\n                id\n            },\n        });\n    }, [dispatch]);\n\n    const deletePomodoro = useCallback(({ id }) => {\n        dispatch({\n            type: DELETE_POMODORO,\n            payload: {\n                id\n            },\n        });\n    }, [dispatch]);\n\n    const resetActiveTask = useCallback(() => {\n        dispatch({\n            type: RESET_ACTIVE_TASK\n        })\n    }, [dispatch])\n\n    const actions = { rowData, activeTaskId, startTimer, stopTimer, addTask, persistSeconds, markAsComplete, deletePomodoro, resetActiveTask };\n\n    return (<PomodoroContext.Provider value={actions}>\n        {children}\n    </PomodoroContext.Provider>\n    );\n}","import { Alert, ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { useState, memo } from 'react';\nconst TaskTypeComponent = memo((props) => {\n\n  const { timerStarted, pomodoroType, setPomodoroType } = props;\n  const [showAlert, setShowAlert] = useState(false);\n\n  const onChange = (event, newValue) => {\n    if (!newValue) return;\n    if (timerStarted) {\n      setShowAlert(true);\n\n      setTimeout(() => {\n        setShowAlert(false)\n      }, 3000)\n      return;\n    }\n    setPomodoroType(newValue);\n  }\n\n  // https://mui.com/components/button-group/\n  return (\n    <div style={{ paddingBottom: 15 }}>\n      <ToggleButtonGroup\n        sx={{\n          '& .MuiToggleButton-root': { color: 'white !important' },\n        }}\n        value={pomodoroType}\n        exclusive={true}\n        onChange={onChange}\n      >\n        <ToggleButton value=\"pomodoro\">Pomodoro</ToggleButton>\n        <ToggleButton value=\"short_break\">Short Break</ToggleButton>\n        <ToggleButton value=\"long_break\">Long Break</ToggleButton>\n      </ToggleButtonGroup>\n      {showAlert && <div style={{ paddingTop: 15 }}><Alert severity=\"warning\">Please stop the timer before clicking an action.</Alert></div>}\n    </div>\n  )\n\n});\n\nexport default TaskTypeComponent;","import { memo } from 'react';\n\nconst TaskDetailsComponent = memo((props) => {\n\n    const { pomodoroType, theme, task } = props;\n\n    const isPomodoroTypeSelected = pomodoroType === \"pomodoro\";\n\n    const emoji = isPomodoroTypeSelected ? '📌' : '🕺';\n\n    return (<div className='task-container' >\n        <span style={{\n            fontSize: 30,\n            paddingRight: '5px'\n        }}>\n            {emoji}\n        </span>\n        <span style={{ color: theme.background, fontWeight: 'bold', fontSize: 24 }}>\n            {isPomodoroTypeSelected ?\n                <>\n                    {task ? \"Working on\" : \"Time to focus!\"}\n                    {task && (<div style={{ fontWeight: 'normal', fontSize: 20 }}>{task}</div>)}\n                </>\n                :\n                \"Time for a break!\"\n            }\n        </span>\n    </div >)\n});\n\nexport default TaskDetailsComponent;","/**\n * Serialises a Date to a string of format `HH:mm am/pm`.\n * from https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format\n * @param date The date to serialise.\n */\nexport function serialiseDate(date) {\n    let serialised = [date.getHours(), padStartWithZeros(date.getMinutes(), 2)].join(':');\n    serialised += date.getHours() >= 12 ? 'pm' : 'am';\n\n    return serialised;\n}\n\nfunction padStartWithZeros(value, totalStringSize) {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function formatSecondsIntoMinutesAndSeconds(value) {\n    const seconds = padStartWithZeros(value % 60, 2);\n    const minutes = padStartWithZeros(Math.floor(value / 60), 2);\n    return [minutes, seconds].join(':');\n}","import { Button } from '@mui/material';\nimport { memo } from 'react';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport StopIcon from '@mui/icons-material/Stop';\nimport { serialiseDate } from '../../utils/date';\n\nconst EndTimeComponent = memo((props) => {\n    const { pomodoroType, buttonColor, timerStarted, setTimerStarted, stopTimer, startTimer, id, timeLeft } = props;\n    const endTime = new Date();\n    const endTimeDelta = pomodoroType === \"pomodoro\" ? timeLeft ? timeLeft : 1500 : pomodoroType === \"short_break\" ? 300 : 900;\n    endTime.setMinutes(endTime.getMinutes() + Math.round(endTimeDelta / 60));\n    const endTimeString = serialiseDate(endTime);\n\n    return (<div style={{ display: 'flex', paddingLeft: '15px' }}>\n        <Button disableElevation\n            sx={{\n                backgroundColor: 'white',\n                color: buttonColor,\n                fontWeight: 'bold',\n                '&:hover': {\n                    backgroundColor: '#00000014',\n                    color: 'white'\n                },\n            }}\n            onClick={() => {\n                if (id) {\n                    timerStarted ? stopTimer({ id }) : startTimer({ id })\n                }\n                setTimerStarted(!timerStarted);\n\n            }}\n            startIcon={timerStarted ? <StopIcon fontSize='medium' /> : <PlayArrowIcon fontSize='medium' />}\n            variant=\"contained\">{timerStarted ? \"STOP\" : \"START\"}</Button>\n        <div style={{ marginLeft: 'auto' }}>\n            <span style={{\n                color: 'white',\n\n                fontSize: 20\n            }}>\n                end time\n                <span style={{\n                    fontWeight: 'bold',\n                    fontSize: 30\n                }}>\n                    {\" \" + endTimeString}\n                </span>\n            </span>\n        </div></div>)\n});\n\nexport default EndTimeComponent;","import { useState, useEffect, memo } from 'react';\nimport { formatSecondsIntoMinutesAndSeconds } from '../../utils/date';\nimport EndTimeComponent from './EndTimeComponent';\n\nconst TaskTimerComponent = memo((props) => {\n  const { pomodoroType, stopTimer, startTimer, theme } = props;\n  const { timeLeft, id, timerStarted } = props.value || '';\n  const [seconds, setSeconds] = useState(25 * 60);\n  const [stateTimerStarted, setStateTimerStarted] = useState(false);\n\n  // timerStarted may not exist on the initial render\n  // when it does exist, we store it inside the state variable stateTimerStarted\n  useEffect(() => {\n    if (timerStarted !== undefined) {\n      setStateTimerStarted(timerStarted)\n    }\n  }, [timerStarted]);\n\n  // timeLeft may not exist on the initial render\n  // when it does exist, we store it inside the state variable seconds\n  useEffect(() => {\n    if (timeLeft !== undefined) {\n      setSeconds(timeLeft);\n    }\n  }, [timeLeft])\n\n  /* this is to reset the timer if:\n  - a timer has reached 0 seconds which means completed=true\n  - a task from the grid is not active, therefore we show the default timer\n  */\n  useEffect(() => {\n    if (pomodoroType !== 'pomodoro') {\n      // console.log('id', id)\n      setSeconds(prev => {\n        return pomodoroType === \"short_break\" ? 5 * 60 : pomodoroType === \"long_break\" ? 15 * 60 : 25 * 60;\n      })\n      setStateTimerStarted(false);\n    } else {\n      if (id !== undefined) {\n      } else {\n        setSeconds(prev => 25 * 60);\n      }\n    }\n  }, [pomodoroType, id]);\n\n  // handle the timer logic\n  useEffect(() => {\n    let timer;\n\n    if (stateTimerStarted) {\n      timer = setInterval(() => {\n        setSeconds(prev => prev - 1)\n      }, 1000);\n    }\n\n    return () => {\n      if (timer) { clearInterval(timer); };\n    }\n  }, [stateTimerStarted]);\n\n  // when the timer reaches 0, set stateTimerStarted=false, so that the timer will stop\n  useEffect(() => {\n    if (seconds === 0) {\n      setStateTimerStarted(false);\n    }\n  }, [seconds])\n\n  const timerString = formatSecondsIntoMinutesAndSeconds(seconds);\n  return (\n    <div>\n      <div style={{ color: 'white', fontWeight: 'bold', fontSize: 90, padding: '30px 0px' }}>{timerString}</div>\n      <EndTimeComponent\n        buttonColor={theme.background}\n        timerStarted={stateTimerStarted}\n        setTimerStarted={(prev) => setStateTimerStarted(prev)}\n        stopTimer={stopTimer}\n        id={id}\n        timeLeft={timeLeft}\n        startTimer={startTimer}\n        pomodoroType={pomodoroType} />\n    </div>\n  )\n});\n\nexport default TaskTimerComponent;","import { useState, useEffect, useContext, memo } from 'react';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport TaskTypeComponent from './task-components/TaskTypeComponent';\nimport TaskDetailsComponent from './task-components/TaskDetailsComponent';\nimport TaskTimerComponent from './task-components/TaskTimerComponent';\n\nconst MainTaskComponent = memo((props) => {\n  const { activeTaskId, rowData, resetActiveTask, stopTimer, startTimer } = useContext(PomodoroContext);\n  const [activeTask, setActiveTask] = useState(null);\n  const [pomodoroType, setPomodoroType] = useState('pomodoro');\n  const { timeLeft, id, task, taskNo, taskCount, timerStarted, completed } = activeTask ? activeTask : {};\n  const { themes } = props;\n  \n  // if there is an active task, i.e. the timer is running, then store the data inside the activeTask hook\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setActiveTask(rowData.filter(row => row.id === activeTaskId)[0])\n    } else {\n      setActiveTask({})\n    }\n  }, [activeTaskId, rowData]);\n\n  // when task is completed i.e. timer has reached 0 seconds or via button, show the short break option\n  useEffect(() => {\n    if (completed) {\n      setPomodoroType('short_break')\n    }\n  }, [completed])\n\n  // if type is changed from pomodoro to short break or long break, reset the active task \n  useEffect(() => {\n    if (id && (pomodoroType === \"long_break\" || pomodoroType === \"short_break\")) {\n      resetActiveTask();\n    }\n  }, [pomodoroType, id, resetActiveTask])\n\n\n\n  // whenever there is no active task, i.e. a task from the grid is not active, then default to pomodoro option\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setPomodoroType('pomodoro')\n    }\n  }, [activeTaskId])\n\n  const value = { timeLeft, id, task, timerStarted, completed };\n  return (<div className=\"main-task-background\" style={{ backgroundColor: themes[pomodoroType].background }} >\n    <div className=\"main-task-container\">\n      <TaskTypeComponent timerStarted={timerStarted} pomodoroType={pomodoroType} setPomodoroType={(type) => setPomodoroType(type)} />\n      <TaskDetailsComponent pomodoroType={pomodoroType} id={id} theme={themes[pomodoroType]} task={task ? `${task} (${taskNo}/${taskCount})` : undefined} />\n      <TaskTimerComponent value={value} pomodoroType={pomodoroType} stopTimer={stopTimer} startTimer={startTimer} theme={themes[pomodoroType]} />\n    </div>\n\n  </div>)\n})\nexport default MainTaskComponent;","import { memo, useContext } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport { IconButton } from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport StopIcon from '@mui/icons-material/Stop';\n\nconst ActionCellRenderer = memo((props) => {\n    const { startTimer, stopTimer, rowData, deletePomodoro, markAsComplete } = useContext(PomodoroContext);\n    const { timerStarted, id, timeLeft, completed, } = props.node.data;\n    // start and stop the timer for the active task\n    const toggleTimer = () => {\n        if (timerStarted) {\n            stopTimer({ id, timeLeft });\n        }\n        else { startTimer({ id }) }\n    }\n\n    // dispatch an action to mark the active task as complete\n    // if the timer is active, then display loading overlay\n    const completeTask = () => {\n        if (timerStarted) {\n            props.api.showLoadingOverlay();\n            setTimeout(() => {\n                props.api.hideOverlay();\n            }, 3000)\n            return;\n        }\n        markAsComplete({ id })\n    }\n\n    // dispatch an action to delete active task\n    // if the timer is active, then display loading overlay\n    const deleteTask = () => {\n        if (timerStarted) {\n            props.api.showLoadingOverlay();\n\n            setTimeout(() => {\n                props.api.hideOverlay();\n            }, 3000)\n            return;\n        }\n        deletePomodoro({ id })\n    }\n\n    // button is disabled if there exists a timer running for a task\n    const isButtonDisabled = () => {\n        if (rowData) {\n            const activeTimers = rowData.filter((row) => (row.timerStarted && row.id !== id));\n            const isTimerActive = activeTimers.length > 0;\n            if (isTimerActive) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    return (<>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            size=\"small\"\n            onClick={toggleTimer}\n            disabled={completed ? true : isButtonDisabled()}\n        >\n            {timerStarted ? <StopIcon fontSize=\"large\" /> : <PlayArrowIcon fontSize=\"large\" />}\n        </IconButton>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            disabled={completed ? true : isButtonDisabled()}\n            onClick={completeTask}\n            size=\"small\">\n            <CheckCircleIcon fontSize=\"large\" />\n        </IconButton>\n        <IconButton\n            sx={{\n                color: 'white',\n            }}\n            disabled={isButtonDisabled()}\n            size=\"small\"\n            onClick={deleteTask}\n        >\n            <DeleteIcon fontSize=\"large\" />\n        </IconButton>\n    </>)\n});\n\nexport default ActionCellRenderer;","import { Box, CircularProgress, Typography } from '@mui/material';\nimport { useState, useEffect, memo, useContext } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport { formatSecondsIntoMinutesAndSeconds } from '../../utils/date';\n\n// https://mui.com/components/progress/#circular-with-label\nfunction CircularProgressWithLabel(props) {\n  return (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      <CircularProgress variant='determinate' {...props} />\n      <Box\n        sx={{\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"white\">\n          {`${Math.round(props.value)}%`}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nconst ProgressComponent = memo(props => {\n  const { timeLeft } = props;\n  // represent timeLeft as a percentage of the total time\n  const minutes = Math.floor((((1500 - timeLeft) / 1500) * 100));\n\n  return (<CircularProgressWithLabel sx={{ color: 'white' }} value={minutes} />);\n});\n\nconst TimerCellRenderer = memo(props => {\n  const { stopTimer, persistSeconds, markAsComplete } = useContext(PomodoroContext);\n  const { id, timerStarted, timeLeft } = props.node.data;\n  const [seconds, setSeconds] = useState(timeLeft);\n\n  // when timer is stopped, get the time left for the active task and persist it to the store\n  useEffect(() => {\n    if (!timerStarted) {\n      persistSeconds({ id, timeLeft: seconds })\n    };\n  }, [timerStarted, persistSeconds, seconds, id]);\n\n  // start ticking the timer by decrementing every second\n  // if seconds reaches 0, then stop the timer and mark the task as completed\n  useEffect(() => {\n    let timer;\n\n    if (timerStarted) {\n      timer = setInterval(() => {\n        setSeconds(prev => prev - 1)\n      }, 1000);\n    }\n\n    return () => {\n      if (timer) { clearInterval(timer); };\n    }\n  }, [seconds, timerStarted]);\n\n  useEffect(() => {\n    if (seconds === 0) {\n      stopTimer({ id });\n      markAsComplete({ id });\n    }\n  }, [seconds, stopTimer, markAsComplete, id])\n\n  // format the seconds into minutes and seconds\n  let timeString = formatSecondsIntoMinutesAndSeconds(seconds);\n\n  return (<>\n    <div\n      style={{\n        fontSize: '25px',\n        fontWeight: 'bold'\n      }}>\n      {timeString}\n    </div>\n    <ProgressComponent timeLeft={seconds} />\n  </>)\n\n});\n\nexport default TimerCellRenderer;","import React, { useContext, memo, useState } from 'react';\nimport { PomodoroContext } from '../../context/PomodoroContext';\nimport AddTaskIcon from '@mui/icons-material/AddTask';\nimport { Box, MenuItem, Button, TextField } from '@mui/material';\n\nconst AddTaskCellRenderer = memo((props) => {\n    const { addTask } = useContext(PomodoroContext);\n    const [pomodoroCount, setPomodoroCount] = useState(1);\n    const [task, setTask] = useState(\"\");\n    const [error, setError] = useState(false);\n\n    // dispatch an action to add a new tasks with the task and required pomodoro timers\n    const addTaskHandler = (e) => {\n        if (task.length < 1) {\n            setError(true)\n        } else {\n            for (let i = 0; i < pomodoroCount; i++) {\n                addTask({ task, taskNo: i + 1, taskCount: pomodoroCount })\n            };\n            setError(false)\n        }\n    }\n\n    return (<div\n        style={{\n            display: 'flex',\n            height: '100%',\n            justifyContent: 'center'\n        }}>\n        <div style={{ height: '100%', backgroundColor: '#ffffff1a', display: 'flex', alignItems: 'center' }}>\n            <Box\n                component=\"form\"\n                sx={{\n                    display: 'flex',\n                    alignItems: \"center\",\n                    justifyContent: 'center',\n                    width: '100%',\n                    '& .MuiTextField-root': { mx: 3 },\n                    '& .MuiButton-root': { mx: 3 },\n                }}\n            >\n                <TextField\n                    id=\"outlined-basic\"\n                    required\n                    label=\"I'm working on...\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    value={task}\n                    error={error}\n                    onChange={(e) => setTask(e.target.value)}\n                />\n                <TextField\n                    select\n                    label=\"Est. Pomodoros\"\n                    type={'number'}\n                    sx={{ minWidth: 125 }}\n                    value={pomodoroCount}\n                    onChange={(e) => setPomodoroCount(e.target.value)}\n                    size=\"small\"\n                    variant=\"outlined\">\n                    <MenuItem value={1}>One</MenuItem>\n                    <MenuItem value={2}>Two</MenuItem>\n                    <MenuItem value={3}>Three</MenuItem>\n                    <MenuItem value={4}>Four</MenuItem>\n                </TextField>\n                <Button\n                    variant=\"contained\"\n                    size='large'\n                    color=\"primary\"\n                    startIcon={<AddTaskIcon />}\n                    onClick={addTaskHandler}\n                >\n                    Add Task\n                </Button>\n            </Box>\n        </div>\n    </div>)\n})\n\nexport default AddTaskCellRenderer;","\nimport React, { useContext, useCallback, useMemo } from 'react';\nimport '../App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport ActionCellRenderer from './cell-renderers/ActionCellRenderer';\nimport TimerCellRenderer from './cell-renderers/TimerCellRenderer';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport AddTaskCellRenderer from './full-width-cell-renderers/AddTaskCellRenderer';\nimport { serialiseDate } from '../utils/date';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nfunction Grid(props) {\n    const { themes } = props;\n    const { rowData } = useContext(PomodoroContext);\n\n    const formatDateIntoMinutesAndSeconds = ({ value, data }) => (value && data.timeLeft) ? serialiseDate(value) : value;\n\n    const columnTypes = useMemo(() => ({\n        'timeColumn': {\n            cellStyle: {\n                justifyContent: 'center',\n            },\n        },\n        'grayColumn': {\n            cellStyle: {\n                backgroundColor: '#ffffff1a',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-around'\n            },\n        },\n        'textColumn': {\n            cellStyle: {\n                fontWeight: 'bold',\n                fontSize: '20px',\n                display: 'flex',\n                alignItems: 'center',\n            },\n        }\n    }), [])\n\n    const columnDefs = [\n        {\n            field: \"action\",\n            maxWidth: 200,\n            type: 'grayColumn',\n            cellRendererSelector: ({ data }) => {\n                return data.task ? { component: ActionCellRenderer } : undefined;\n            },\n            pinned: 'left'\n        },\n        {\n            field: \"task\",\n            minWidth: 1000,\n            type: 'textColumn',\n            valueFormatter: ({ data, value }) => {\n                if (data.taskNo) {\n                    return `${value} (${data.taskNo}/${data.taskCount})`\n                }\n                return value;\n            },\n        },\n        {\n            headerName: 'Progress',\n            field: \"timer\",\n            type: 'grayColumn',\n            minWidth: 200,\n            valueGetter: ({ data }) => data.timeLeft,\n            sort: 'asc',\n            cellRendererSelector: ({ data }) => {\n                return data.task ? { component: TimerCellRenderer, params: {} } : undefined;\n            },\n\n        },\n        {\n            headerName: \"Start Time\",\n            field: \"start_time\",\n            type: ['timeColumn', 'textColumn'],\n            valueGetter: params => {\n                if (params.data.timerStarted) {\n                    return new Date();\n                }\n            },\n            valueFormatter: formatDateIntoMinutesAndSeconds\n        },\n        {\n            headerName: 'End Time',\n            field: \"end_time\",\n            type: ['timeColumn', 'textColumn'],\n            valueGetter: params => {\n                const startTime = params.getValue('start_time');\n                if (startTime) {\n                    const date = startTime;\n                    const newDate = new Date(date);\n                    newDate.setMinutes(date.getMinutes() + Math.round(params.data.timeLeft / 60));\n                    return newDate\n                }\n            },\n            valueFormatter: formatDateIntoMinutesAndSeconds,\n\n        }\n    ];\n\n    const defaultColDef = useMemo(() => ({ flex: 1, suppressMovable: true, minWidth: 100 }), []);\n\n    const getRowStyle = useCallback(params => {\n        const { completed } = params.data;\n        if (!params.node.isRowPinned()) {\n            if (completed) {\n                const { background, foreground } = themes['completed'];\n                return { backgroundColor: background, color: foreground }\n            } else {\n                const { background, foreground } = themes['pomodoro'];\n                return { backgroundColor: background, color: foreground }\n            }\n        }\n    }, [themes])\n\n    const postSort = useCallback(rowNodes => {\n        // here we put completed rows on top while preserving the sort order\n        let nextInsertPos = 0;\n        for (let i = 0; i < rowNodes.length; i++) {\n            const completed = rowNodes[i].data.completed;\n            if (completed) {\n                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);\n                nextInsertPos++;\n            }\n        }\n    }, [])\n\n    return (\n        <div style={{ height: '50%', width: '100%' }}>\n            <div className=\"ag-theme-alpine\" style={{ height: '100%', width: '100%' }}>\n                <AgGridReact\n                    ref={props.gridRef}\n                    rowData={rowData}\n                    columnTypes={columnTypes}\n                    columnDefs={columnDefs}\n                    defaultColDef={defaultColDef}\n                    immutableData={true}\n                    fullWidthCellRenderer={AddTaskCellRenderer}\n                    isFullWidthCell={(node) => node.rowPinned === 'bottom'}\n                    getRowStyle={getRowStyle}\n                    animateRows={true}\n                    overlayLoadingTemplate={`<span class=\"ag-overlay-loading-center\">Please stop the timer before clicking an action.</span>`}\n                    postSort={postSort}\n                    getRowNodeId={data => data.id}\n                    getRowHeight={(params) => params.node.rowPinned === 'bottom' ? 82 : 60}\n                    pinnedBottomRowData={[{}]}\n                >\n                </AgGridReact>\n            </div>\n        </div>\n    );\n}\n\n\n\nexport default Grid;\n","import React, { useContext, memo } from 'react';\nimport { PomodoroContext } from '../context/PomodoroContext';\nimport { Button } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { useRef } from \"react\";\nimport Grid from \"./Grid\";\n\nconst SaveLocalStorageButton = memo(props => {\n    const { rowData, activeTaskId } = useContext(PomodoroContext);\n\n    // grab reference to the grid so that the component can access the Grid API\n    const gridRef = useRef();\n\n    const saveHandler = () => {\n        if (activeTaskId) {\n            let activeTask = rowData.filter(row => row.id === activeTaskId);\n            if (activeTask.length > 0) {\n                if (activeTask[0].timerStarted) {\n                    gridRef.current.api.showLoadingOverlay();\n                    setTimeout(() => {\n                        gridRef.current.api.hideOverlay();\n                    }, 3000);\n                    return;\n                }\n            }\n        }\n        localStorage.setItem('gridState', JSON.stringify({ rowData, activeTaskId }))\n    }\n\n    return (<>\n        <Grid gridRef={gridRef} themes={props.themes} />\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <Button\n                variant=\"contained\"\n                size='large'\n                color=\"primary\"\n                sx={{ mt: 3 }}\n                startIcon={<SaveIcon />}\n                onClick={saveHandler}\n            >\n                Save to Local Storage\n            </Button>\n        </div>\n    </>)\n})\n\nexport default SaveLocalStorageButton;","import './App.css';\nimport MainTaskComponent from './components/MainTaskComponent';\nimport { useMemo } from 'react';\nimport { PomodoroProvider } from './context/PomodoroContext';\nimport SaveLocalStorageButton from './components/SaveButton';\n\nconst App = () => {\n  const themes = useMemo(() => ({\n    pomodoro: {\n      foreground: '#ffffff',\n      background: '#d95550',\n    },\n    short_break: {\n      foreground: '#ffffff',\n      background: '#1565c0',\n    },\n    long_break: {\n      foreground: '#ffffff',\n      background: '#ab47bc'\n\n    },\n    completed: {\n      foreground: '#ffffff',\n      background: '#4caf50'\n    }\n  }), []);\n\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <PomodoroProvider>\n        <MainTaskComponent themes={themes} />\n\n        <SaveLocalStorageButton themes={themes} />\n      </PomodoroProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}